package br.com.elvisassis.service;import br.com.elvisassis.exception.UnsupportedMathOperationException;import org.springframework.stereotype.Service;@Servicepublic class MathService {    public MathService (UtilService utilService) {        this.utilService = utilService;    }    private UtilService utilService;    public boolean isValidNumeric(String number) {        if (utilService.isNumeric(number)){            return true;        } else {            throw new UnsupportedMathOperationException("Please set a numeric value");        }    }    public Double sum (String numberOner, String numberTwo) {        if(isValidNumeric(numberOner) && isValidNumeric(numberTwo));        return utilService.convertToDouble(numberOner) + utilService.convertToDouble(numberTwo);    }    public Double subtraction (String numberOner, String numberTwo) {        if(isValidNumeric(numberOner) && isValidNumeric(numberTwo));        return utilService.convertToDouble(numberOner) - utilService.convertToDouble(numberTwo);    }    public Double division (String numberOner, String numberTwo) {        if(isValidNumeric(numberOner) && isValidNumeric(numberTwo));        return utilService.convertToDouble(numberOner) / utilService.convertToDouble(numberTwo);    }    public Double multiplication (String numberOner, String numberTwo) {        if(isValidNumeric(numberOner) && isValidNumeric(numberTwo));        return utilService.convertToDouble(numberOner) * utilService.convertToDouble(numberTwo);    }    public Double mean (String numberOner, String numberTwo) {        if(isValidNumeric(numberOner) && isValidNumeric(numberTwo));        return (utilService.convertToDouble(numberOner) + utilService.convertToDouble(numberTwo)) / 2;    }    public Double squareRoot (String number) {        if(isValidNumeric(number));        return Math.sqrt(utilService.convertToDouble(number));    }}