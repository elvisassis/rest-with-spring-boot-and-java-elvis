package br.com.elvisassis.controlleres;import br.com.elvisassis.data.dto.v1.PersonDTO;import br.com.elvisassis.data.dto.v2.PersonDTOV2;import br.com.elvisassis.service.PersonServices;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping("/person")public class PersonController {    public PersonController(PersonServices personServices) {        this.personServices = personServices;    }    private PersonServices personServices;    @GetMapping(produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<List<PersonDTO>> findAll() {        var people = personServices.findAll();        return ResponseEntity.ok(people);    }    @GetMapping(value = "/{id}", produces = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<PersonDTO> findById(@PathVariable("id") Long id) {        var person = personServices.findById(id);        return ResponseEntity.ok(person);    }    @PostMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<PersonDTO> create(@RequestBody PersonDTO personDto) {        var newPerson = personServices.create(personDto);        return ResponseEntity.status(HttpStatus.CREATED).body(newPerson);    }    @PutMapping(produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<PersonDTO> update(@RequestBody PersonDTO personDto) {        var updatePerson = personServices.update(personDto);        return ResponseEntity.ok(updatePerson);    }    @DeleteMapping("/{id}")    public ResponseEntity<Void> delete(@PathVariable("id") Long id) {        personServices.delete(id);        return ResponseEntity.noContent().build();    }    @PostMapping(value = "/v2",            produces = MediaType.APPLICATION_JSON_VALUE,            consumes = MediaType.APPLICATION_JSON_VALUE)    public ResponseEntity<PersonDTOV2> createV2(@RequestBody PersonDTOV2 personDTOV2) {        var newPerson = personServices.createV2(personDTOV2);        return ResponseEntity.status(HttpStatus.CREATED).body(newPerson);    }}