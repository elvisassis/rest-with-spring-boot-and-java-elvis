package br.com.elvisassis.service;import br.com.elvisassis.exception.ResourceNotFoundException;import br.com.elvisassis.model.Person;import br.com.elvisassis.repository.PersonRepository;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import java.util.List;import java.util.concurrent.atomic.AtomicLong;import java.util.logging.Logger;@Slf4j@Servicepublic class PersonServices {    public PersonServices(PersonRepository personRepository) {        this.personRepository = personRepository;    }    private final AtomicLong counter = new AtomicLong();    //private Logger log = Logger.getLogger(PersonServices.class.getName());    private PersonRepository personRepository;    public List<Person> findAll() {        log.info("Finding all Persons!");        return personRepository.findAll();    }    public Person findById(Long id) {        log.info("Finding one Person!");        return personRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("No record found for this ID"));    }    public Person create(Person person) {        log.info("Creating one Person!");        return personRepository.save(person);    }    public Person update(Person person) {        log.info("Updatind one Person!");        Person entity = personRepository.findById(person.getId()).orElseThrow(() -> new ResourceNotFoundException("No record found for this ID"));        entity.setFirstName(person.getFirstName());        entity.setLastName(person.getLastName());        entity.setAddress(person.getAddress());        entity.setGender(person.getGender());        return entity;    }    public void delete(Long id) {        log.info("Deleting one Person!");        Person entity = personRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("No record found for this ID"));        personRepository.delete(entity);    }}