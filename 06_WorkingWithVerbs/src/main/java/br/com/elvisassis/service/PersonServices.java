package br.com.elvisassis.service;import br.com.elvisassis.data.dto.PersonDto;import br.com.elvisassis.exception.ResourceNotFoundException;import static br.com.elvisassis.mapper.ObjectMapper.parseListObjects;import br.com.elvisassis.model.Person;import br.com.elvisassis.repository.PersonRepository;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import java.util.List;import java.util.concurrent.atomic.AtomicLong;@Slf4j@Servicepublic class PersonServices {    public PersonServices(PersonRepository personRepository) {        this.personRepository = personRepository;    }    private final AtomicLong counter = new AtomicLong();    //private Logger log = Logger.getLogger(PersonServices.class.getName());    private PersonRepository personRepository;    public List<PersonDto> findAll() {        log.info("Finding all Persons!");        var personDto = new PersonDto();//        Implementação utilizando MapStruct//        List<PersonDto> personDtos = personRepository.findAll().stream()//                .map(person -> person.toDto())//                .collect(Collectors.toList());//      Implementação utilizando Dozer Mapper        List<PersonDto> personDtos = parseListObjects(personRepository.findAll(), PersonDto.class);        return personDtos;    }    public PersonDto findById(Long id) {        log.info("Finding one Person!");        PersonDto personDto = personRepository.findById(id)                .orElseThrow(() -> new ResourceNotFoundException("No record found for this ID"))                .toDto();        return personDto;    }    public PersonDto create(PersonDto personDto) {        log.info("Creating one Person!");        Person entity = personDto.toEntity();        return personRepository.save(entity).toDto();    }    public PersonDto update(PersonDto personDto) {        log.info("Updatind one Person!");        Person entity = personRepository.findById(personDto.getId()).orElseThrow(() -> new ResourceNotFoundException("No record found for this ID"));        entity = personDto.toEntity();        return personRepository.save(entity).toDto();    }    public void delete(Long id) {        log.info("Deleting one Person!");        Person entity = personRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("No record found for this ID"));        personRepository.delete(entity);    }}