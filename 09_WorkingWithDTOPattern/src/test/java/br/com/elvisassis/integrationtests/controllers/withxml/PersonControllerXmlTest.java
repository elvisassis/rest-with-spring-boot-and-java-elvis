package br.com.elvisassis.integrationtests.controllers.withxml;import br.com.elvisassis.config.TestConfigs;import br.com.elvisassis.integrationtests.dto.PersonDTO;import br.com.elvisassis.integrationtests.dto.wrappers.json.WrapperPersonDTO;import br.com.elvisassis.integrationtests.dto.wrappers.xml.PageModelPerson;import br.com.elvisassis.integrationtests.testconstainers.AbstractIntegrationTest;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.DeserializationFeature;import com.fasterxml.jackson.dataformat.xml.XmlMapper;import io.restassured.builder.RequestSpecBuilder;import io.restassured.filter.log.LogDetail;import io.restassured.filter.log.RequestLoggingFilter;import io.restassured.filter.log.ResponseLoggingFilter;import io.restassured.specification.RequestSpecification;import lombok.extern.slf4j.Slf4j;import org.junit.jupiter.api.*;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.MediaType;import java.util.List;import static io.restassured.RestAssured.given;import static junit.framework.TestCase.*;@Slf4j@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)@TestMethodOrder(MethodOrderer.OrderAnnotation.class)class PersonControllerXmlTest extends AbstractIntegrationTest {    private static RequestSpecification specification;    private static XmlMapper objectMapper;    private static PersonDTO person;    @BeforeAll    static void setUp() {        objectMapper = new XmlMapper();        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);        person = new PersonDTO();    }    @Test    @Order(1)    void createTest() throws JsonProcessingException {        mockPerson();        specification = new RequestSpecBuilder()                .addHeader(TestConfigs.HEADER_PARAM_ORIGIN, TestConfigs.ORIGIN_ERUDIO)                .setBasePath("/api/person/v1")                .setPort(8888)                .addFilter(new RequestLoggingFilter(LogDetail.ALL))                .addFilter(new ResponseLoggingFilter(LogDetail.ALL))                .build();        var content = given(specification)                .contentType(MediaType.APPLICATION_XML_VALUE)                    .accept(MediaType.APPLICATION_XML_VALUE)                    .body(person)                .when()                    .post()                .then()                    .statusCode(201)                    .contentType(MediaType.APPLICATION_XML_VALUE)                .extract()                    .body()                        .asString();        PersonDTO createPerson = objectMapper.readValue(content, PersonDTO.class);        person = createPerson;        assertNotNull(createPerson.getId());        assertTrue(createPerson.getId() > 0);        assertEquals("Elvis", createPerson.getFirstName());        assertEquals("Assis", createPerson.getLastName());        assertEquals("Ros치rio do Rio Grande - Minas Gerais - Brasil", createPerson.getAddress());        assertEquals("Male", createPerson.getGender());        assertTrue(createPerson.getEnabled());    }    @Test    @Order(2)    void updateTest() throws JsonProcessingException {        person.setLastName("Keslei de Assis");        var content = given(specification)                .contentType(MediaType.APPLICATION_XML_VALUE)                    .accept(MediaType.APPLICATION_XML_VALUE)                    .body(person)                .when()                    .put()                .then()                    .statusCode(200)                    .contentType(MediaType.APPLICATION_XML_VALUE)                .extract()                    .body()                        .asString();        PersonDTO createPerson = objectMapper.readValue(content, PersonDTO.class);        person = createPerson;        assertNotNull(createPerson.getId());        assertTrue(createPerson.getId() > 0);        assertEquals("Elvis", createPerson.getFirstName());        assertEquals("Keslei de Assis", createPerson.getLastName());        assertEquals("Ros치rio do Rio Grande - Minas Gerais - Brasil", createPerson.getAddress());        assertEquals("Male", createPerson.getGender());        assertTrue(createPerson.getEnabled());    }    @Test    @Order(3)    void findByIdTest() throws JsonProcessingException {        var content = given(specification)                .contentType(MediaType.APPLICATION_XML_VALUE)                    .accept(MediaType.APPLICATION_XML_VALUE)                    .pathParam("id", person.getId())                .when()                .   get("{id}")                .then()                    .statusCode(200)                    .contentType(MediaType.APPLICATION_XML_VALUE)                .extract()                    .body()                        .asString();        PersonDTO createdPerson = objectMapper.readValue(content, PersonDTO.class);        person = createdPerson;        assertNotNull(createdPerson.getId());        assertTrue(createdPerson.getId() > 0);        assertEquals("Elvis", createdPerson.getFirstName());        assertEquals("Keslei de Assis", createdPerson.getLastName());        assertEquals("Ros치rio do Rio Grande - Minas Gerais - Brasil", createdPerson.getAddress());        assertEquals("Male", createdPerson.getGender());        assertTrue(createdPerson.getEnabled());    }    @Test    @Order(4)    void disableTest() throws JsonProcessingException {        var content = given(specification)                .contentType(MediaType.APPLICATION_XML_VALUE)                .accept(MediaType.APPLICATION_XML_VALUE)                    .pathParam("id", person.getId())                .when()                    .patch("{id}")                .then()                    .statusCode(200)                    .contentType(MediaType.APPLICATION_XML_VALUE)                .extract()                    .body()                        .asString();        PersonDTO createdPerson = objectMapper.readValue(content, PersonDTO.class);        person = createdPerson;        assertNotNull(createdPerson.getId());        assertTrue(createdPerson.getId() > 0);        assertEquals("Elvis", createdPerson.getFirstName());        assertEquals("Keslei de Assis", createdPerson.getLastName());        assertEquals("Ros치rio do Rio Grande - Minas Gerais - Brasil", createdPerson.getAddress());        assertEquals("Male", createdPerson.getGender());        assertFalse(createdPerson.getEnabled());    }    @Test    @Order(5)    void deleteTest() throws JsonProcessingException {        given(specification)                    .pathParam("id", person.getId())                .when()                    .delete("{id}")                .then()                    .statusCode(204);    }    @Test    @Order(6)    void findAllTest() throws JsonProcessingException {        var content = given(specification)                .contentType(MediaType.APPLICATION_XML_VALUE)                .accept(MediaType.APPLICATION_XML_VALUE)                .queryParams("page", 3, "size", 12, "direction", "asc")                .when()                    .get()                .then()                    .statusCode(200)                .contentType(MediaType.APPLICATION_XML_VALUE)                    .extract()                        .body()                            .asString();        PageModelPerson wrapper = objectMapper.readValue(content, PageModelPerson.class);        List<PersonDTO> people = wrapper.getContent();        PersonDTO personOne = people.get(0);        person = personOne;        assertNotNull(personOne.getId());        assertTrue(personOne.getId() > 0);        assertEquals("Allin", personOne.getFirstName());        assertEquals("Emmot", personOne.getLastName());        assertEquals("7913 Lindbergh Way", personOne.getAddress());        assertEquals("Male", personOne.getGender());        assertFalse(personOne.getEnabled());        PersonDTO personTwo = people.get(1);        person = personTwo;        assertNotNull(personTwo.getId());        assertTrue(personTwo.getId() > 0);        assertEquals("Allin", personTwo.getFirstName());        assertEquals("Otridge", personTwo.getLastName());        assertEquals("09846 Independence Center", personTwo.getAddress());        assertEquals("Male", personTwo.getGender());        assertFalse(personTwo.getEnabled());    }    @Test    @Order(7)    void findByNameTest() throws JsonProcessingException {        var content = given(specification)                .contentType(MediaType.APPLICATION_XML_VALUE)                .accept(MediaType.APPLICATION_XML_VALUE)                .pathParam("firstName", "and")                .queryParams("page", 0, "size", 5, "direction", "asc")                .when()                    .get("findByName/{firstName}")                .then()                    .statusCode(200)                .contentType(MediaType.APPLICATION_XML_VALUE)                    .extract()                        .body()                            .asString();        PageModelPerson wrapper = objectMapper.readValue(content, PageModelPerson.class);        List<PersonDTO> people = wrapper.getContent();        PersonDTO personOne = people.get(0);        person = personOne;        assertNotNull(personOne.getId());        assertTrue(personOne.getId() > 0);        assertEquals("Alessandro", personOne.getFirstName());        assertEquals("McFaul", personOne.getLastName());        assertEquals("5 Lukken Plaza", personOne.getAddress());        assertEquals("Male", personOne.getGender());        assertTrue(personOne.getEnabled());        PersonDTO personTwo = people.get(1);        person = personTwo;        assertNotNull(personTwo.getId());        assertTrue(personTwo.getId() > 0);        assertEquals("Andrey", personTwo.getFirstName());        assertEquals("Climar", personTwo.getLastName());        assertEquals("77478 Northridge Point", personTwo.getAddress());        assertEquals("Male", personTwo.getGender());        assertTrue(personTwo.getEnabled());    }    private void mockPerson() {        person.setFirstName("Elvis");        person.setLastName("Assis");        person.setAddress("Ros치rio do Rio Grande - Minas Gerais - Brasil");        person.setGender("Male");        person.setEnabled(true);    }}