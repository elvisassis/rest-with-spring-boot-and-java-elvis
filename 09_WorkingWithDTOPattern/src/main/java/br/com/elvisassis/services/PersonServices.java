package br.com.elvisassis.services;import br.com.elvisassis.controlleres.PersonController;import br.com.elvisassis.data.dto.PersonDTO;import br.com.elvisassis.exception.RequiredObjectIsNullException;import br.com.elvisassis.exception.ResourceNotFoundException;import br.com.elvisassis.model.Person;import br.com.elvisassis.repository.PersonRepository;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import java.util.List;import static br.com.elvisassis.mapper.ObjectMapper.parseListObjects;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;@Slf4j@Servicepublic class PersonServices {    public PersonServices(PersonRepository personRepository) {        this.personRepository = personRepository;    }    //private Logger log = Logger.getLogger(PersonServices.class.getName());    private PersonRepository personRepository;    private static final String RESOURCE_NOT_FOUND = "No record found for this ID!";    public List<PersonDTO> findAll() {        log.info("Finding all Persons!");        var personDto = new PersonDTO();//        Implementação utilizando MapStruct//        List<PersonDTOV2> personDtos = personRepository.findAll().stream()//                .map(person -> person.toDto())//                .collect(Collectors.toList());//      Implementação utilizando Dozer Mapper        List<PersonDTO> personDtos = parseListObjects(personRepository.findAll(), PersonDTO.class);        personDtos.forEach(this::addHateoasLinks);        return personDtos;    }    public PersonDTO findById(Long id) {        log.info("Finding one Person!");        PersonDTO personDto = personRepository.findById(id)                .orElseThrow(() -> new ResourceNotFoundException(RESOURCE_NOT_FOUND))                .toDto();        addHateoasLinks(personDto);        return personDto;    }    public PersonDTO create(PersonDTO personDto) {        if (personDto == null) throw new RequiredObjectIsNullException();        log.info("Creating one Person!");        Person entity = personDto.toEntity();        var dto = personRepository.save(entity).toDto();        addHateoasLinks(dto);        return dto;    }    public PersonDTO update(PersonDTO personDto) {        if (personDto == null) throw new RequiredObjectIsNullException();        log.info("Updatind one Person!");        var entity = personRepository.findById(personDto.getId()).orElseThrow(() -> new ResourceNotFoundException(RESOURCE_NOT_FOUND));        entity = personDto.toEntity();        var dto = personRepository.save(entity).toDto();        addHateoasLinks(dto);        return dto;    }    public void delete(Long id) {        log.info("Deleting one Person!");        Person entity = personRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("No record found for this ID"));        personRepository.delete(entity);    }    private void addHateoasLinks(PersonDTO personDto) {        personDto.add(linkTo(methodOn(PersonController.class).findById(personDto.getId())).withSelfRel().withType("GET"));        personDto.add(linkTo(methodOn(PersonController.class).findAll()).withRel("findAll").withType("GET"));        personDto.add(linkTo(methodOn(PersonController.class).create(personDto)).withRel("create").withType("POST"));        personDto.add(linkTo(methodOn(PersonController.class).update(personDto)).withRel("update").withType("PUT"));        personDto.add(linkTo(methodOn(PersonController.class).delete(personDto.getId())).withRel("delete").withType("DELETE"));    }    }