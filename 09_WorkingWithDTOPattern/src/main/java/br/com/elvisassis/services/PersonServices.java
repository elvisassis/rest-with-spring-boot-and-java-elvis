package br.com.elvisassis.services;import br.com.elvisassis.controlleres.PersonController;import br.com.elvisassis.data.dto.PersonDTO;import br.com.elvisassis.exception.BadRequestException;import br.com.elvisassis.exception.FileStorageException;import br.com.elvisassis.exception.RequiredObjectIsNullException;import br.com.elvisassis.exception.ResourceNotFoundException;import br.com.elvisassis.file.exporter.MediaTypes;import br.com.elvisassis.file.exporter.contract.FileExporter;import br.com.elvisassis.file.exporter.factory.FileExporterFactory;import br.com.elvisassis.file.importer.contract.FileImporter;import br.com.elvisassis.file.importer.factory.FileImporterFactory;import br.com.elvisassis.model.Person;import br.com.elvisassis.repository.PersonRepository;import jakarta.transaction.Transactional;import lombok.extern.slf4j.Slf4j;import org.springframework.core.io.Resource;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.web.PagedResourcesAssembler;import org.springframework.hateoas.EntityModel;import org.springframework.hateoas.Link;import org.springframework.hateoas.PagedModel;import org.springframework.hateoas.server.mvc.WebMvcLinkBuilder;import org.springframework.stereotype.Service;import org.springframework.web.multipart.MultipartFile;import java.io.IOException;import java.io.InputStream;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;@Slf4j@Servicepublic class PersonServices {    public PersonServices(PagedResourcesAssembler<PersonDTO> assembler,                          PersonRepository personRepository,                          FileImporterFactory importer,                          FileExporterFactory exporterFactory                          ) {        this.assembler = assembler;        this.repository = personRepository;        this.importerFactory = importer;        this.exporterFactory = exporterFactory;    }    PersonRepository repository;    FileImporterFactory importerFactory;    FileExporterFactory exporterFactory;    PagedResourcesAssembler<PersonDTO> assembler;    private static final String RESOURCE_NOT_FOUND = "No record found for this ID!";    public PagedModel<EntityModel<PersonDTO>> findAll(Pageable pageable) {        log.info("Finding all Persons!");        var personDto = new PersonDTO();//        Implementação utilizando MapStruct//        List<PersonDTOV2> personDtos = personRepository.findAll().stream()//                .map(person -> person.toDto())//                .collect(Collectors.toList());//      Implementação utilizando Dozer Mapper//       List<PersonDTO> personDtos = ObjectMapper.parseListObjects(personRepository.findAll(), PersonDTO.class);        var people = repository.findAll(pageable);        return buildPageModel(pageable, people);    }    public PagedModel<EntityModel<PersonDTO>> findByName(String firstName, Pageable pageable) {        log.info("Finding People by name!");        var people = repository.findPeopleByName(firstName, pageable);        return buildPageModel(pageable, people);    }    public Resource exportPerson(Long id, String acceptHeader) {        log.info("Exporting data of one Person!");        var person = repository.findById(id)                .orElseThrow(() -> new ResourceNotFoundException(RESOURCE_NOT_FOUND))                .toDto();        try {            FileExporter exporter = this.exporterFactory.getExporter(acceptHeader);            return exporter.exportPerson(person);        } catch (Exception e) {            throw new RuntimeException("Error during person export", e);        }    }    public PersonDTO findById(Long id) {        log.info("Finding one Person!");        PersonDTO personDto = repository.findById(id)                .orElseThrow(() -> new ResourceNotFoundException(RESOURCE_NOT_FOUND))                .toDto();        addHateoasLinks(personDto);        return personDto;    }    public Resource exportPage(Pageable pageable, String acceptHeader){        log.info("Exporting a People page!");        var people = repository.findAll(pageable)                .map(person -> person.toDto())                .getContent();        try {            FileExporter exporter = this.exporterFactory.getExporter(acceptHeader);            return exporter.exportFile(people);        } catch (Exception e) {            throw new RuntimeException("Error during file export", e);        }    }    public PersonDTO create(PersonDTO personDto) {        if (personDto == null) throw new RequiredObjectIsNullException();        log.info("Creating one Person!");        Person entity = personDto.toEntity();        var dto = repository.save(entity).toDto();        addHateoasLinks(dto);        return dto;    }    public List<PersonDTO> massCreation(MultipartFile file) {        log.info("Importing Persons from file!");        if (file.isEmpty()) throw new BadRequestException("Please set a Valid File");        try (InputStream inputStream = file.getInputStream()) {            String filename = Optional.ofNullable(file.getOriginalFilename())                    .orElseThrow(() -> new BadRequestException("File name cannot be null!"));            FileImporter importer = this.importerFactory.getImporter(filename);            List<Person> entities = importer.importerFile(inputStream).stream()                    .map(dto -> repository.save(dto.toEntity()))                    .toList();            return entities.stream()                    .map(entity -> {                        var dto = entity.toDto();                        addHateoasLinks(dto);                        return dto;                    }).toList();        } catch (Exception e) {            throw new FileStorageException("Erro processing the file!");        }    }    public PersonDTO update(PersonDTO personDto) {        if (personDto == null) throw new RequiredObjectIsNullException();        log.info("Updatind one Person!");        var entity = repository.findById(personDto.getId()).orElseThrow(() -> new ResourceNotFoundException(RESOURCE_NOT_FOUND));        entity = personDto.toEntity();        var dto = repository.save(entity).toDto();        addHateoasLinks(dto);        return dto;    }    @Transactional    public PersonDTO disablePerson(Long id) {        log.info("Disabling one Person!");        repository.findById(id).orElseThrow(() -> new ResourceNotFoundException("No record found for this ID"));        repository.disablePerson(id);        var entity = repository.findById(id).get();        var dto = entity.toDto();        addHateoasLinks(dto);        return dto;    }    public void delete(Long id) {        log.info("Deleting one Person!");        Person entity = repository.findById(id).orElseThrow(() -> new ResourceNotFoundException("No record found for this ID"));        repository.delete(entity);    }    private PagedModel<EntityModel<PersonDTO>> buildPageModel(Pageable pageable, Page<Person> people) {        var peopleWithLinks = people.map(person -> {            var dto = person.toDto();            addHateoasLinks(dto);            return dto;        });        Link findAllLinks = WebMvcLinkBuilder.linkTo(                        WebMvcLinkBuilder.methodOn(PersonController.class)                                .findAll(                                        pageable.getPageNumber(),                                        pageable.getPageSize(),                                        String.valueOf(pageable.getSort())))                .withSelfRel();        return assembler.toModel(peopleWithLinks, findAllLinks);    }    private void addHateoasLinks(PersonDTO personDto) {        personDto.add(linkTo(methodOn(PersonController.class).findById(personDto.getId())).withSelfRel().withType("GET"));        personDto.add(linkTo(methodOn(PersonController.class).findAll(1, 12, "asc")).withRel("findAll").withType("GET"));        personDto.add(linkTo(methodOn(PersonController.class).findByName("", 0, 12, "asc")).withRel("findByName").withType("GET"));        personDto.add(linkTo(methodOn(PersonController.class).create(personDto)).withRel("create").withType("POST"));        personDto.add(linkTo(methodOn(PersonController.class)).slash("massCreation").withRel("massCreation").withType("POST"));        personDto.add(linkTo(methodOn(PersonController.class).update(personDto)).withRel("update").withType("PUT"));        personDto.add(linkTo(methodOn(PersonController.class).disablePerson(personDto.getId())).withRel("disable").withType("PATCH"));        personDto.add(linkTo(methodOn(PersonController.class).delete(personDto.getId())).withRel("delete").withType("DELETE"));        personDto.add(linkTo(methodOn(PersonController.class).exportPage(1, 12, "asc", null)).withRel("exportPage").withType("GET").withTitle("Export People"));    }}