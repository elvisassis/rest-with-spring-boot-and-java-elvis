package br.com.elvisassis.services;import br.com.elvisassis.data.dto.security.AccountCredentialsDTO;import br.com.elvisassis.data.dto.security.TokenDTO;import br.com.elvisassis.repository.UserRepository;import br.com.elvisassis.security.jwt.JwtTokenProvider;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.stereotype.Service;@Servicepublic class AuthService {    public AuthService(AuthenticationManager authenticationManager, JwtTokenProvider tokenProvider, UserRepository repository) {        this.authenticationManager = authenticationManager;        this.tokenProvider = tokenProvider;        this.repository = repository;    }    private AuthenticationManager authenticationManager;    private JwtTokenProvider tokenProvider;    private UserRepository repository;    public ResponseEntity<TokenDTO> sigIn(AccountCredentialsDTO credentials) {        authenticationManager.authenticate(                new UsernamePasswordAuthenticationToken(                        credentials.getUsername(),                        credentials.getPassword()                )        );        var user = repository.findByUserName(credentials.getUsername());        if (user == null) throw new UsernameNotFoundException("Username " + credentials.getUsername() + " not found");        var token = tokenProvider.createdAccessToken(                credentials.getUsername(),                user.getRoles()        );        return ResponseEntity.ok(token);    }}