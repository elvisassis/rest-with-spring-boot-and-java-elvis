package br.com.elvisassis.controlleres.docs;import br.com.elvisassis.data.dto.PersonDTO;import br.com.elvisassis.file.exporter.MediaTypes;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.media.ArraySchema;import io.swagger.v3.oas.annotations.media.Content;import io.swagger.v3.oas.annotations.media.Schema;import io.swagger.v3.oas.annotations.responses.ApiResponse;import jakarta.servlet.http.HttpServletRequest;import org.springframework.core.io.Resource;import org.springframework.data.domain.Page;import org.springframework.hateoas.EntityModel;import org.springframework.hateoas.PagedModel;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.PatchMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.multipart.MultipartFile;import java.util.List;public interface PersonControllerDocs {    @Operation(summary = "Finds All People",            description = "Finds All People",            tags = {"People"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = {                                    @Content(                                            mediaType = MediaType.APPLICATION_JSON_VALUE,                                            array = @ArraySchema(schema = @Schema(implementation = PersonDTO.class))                                    )                            }),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            }    )    ResponseEntity<PagedModel<EntityModel<PersonDTO>>> findAll(          @RequestParam(value = "page", defaultValue = "0") Integer page,          @RequestParam(value = "size", defaultValue = "12") Integer size,          @RequestParam(value = "direction", defaultValue = "asc") String direction    );    @Operation(summary = "Export People",            description = "Export a Page of People in XLSX and CSV format",            tags = {"People"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = {                                    @Content(mediaType = MediaTypes.APPLICATION_XLSX_VALUE),                                    @Content(mediaType = MediaTypes.APPLICATION_CSV_VALUE)                            }),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            }    )    ResponseEntity<Resource> exportPage(          @RequestParam(value = "page", defaultValue = "0") Integer page,          @RequestParam(value = "size", defaultValue = "12") Integer size,          @RequestParam(value = "direction", defaultValue = "asc") String direction,          HttpServletRequest request    );    @Operation(summary = "Massive People Creation",            description = "Massive People Creation with upload of XLSX or CSV",            tags = {"People"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = {                                    @Content (schema = @Schema(implementation = PersonDTO.class))                            }),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            }    )    ResponseEntity<List<PersonDTO>> massCreation(MultipartFile file) throws Exception;    @Operation(summary = "Find People by firstName",            description = "Finds People by their Fist Names",            tags = {"People"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = {                                    @Content(                                            mediaType = MediaType.APPLICATION_JSON_VALUE,                                            array = @ArraySchema(schema = @Schema(implementation = PersonDTO.class))                                    )                            }),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            }    )    ResponseEntity<PagedModel<EntityModel<PersonDTO>>> findByName(          @PathVariable("{firstName}") String firstName,          @RequestParam(value = "page", defaultValue = "0") Integer page,          @RequestParam(value = "size", defaultValue = "12") Integer size,          @RequestParam(value = "direction", defaultValue = "asc") String direction    );    @Operation(summary = "Finds a Person",            description = "Find a specific person by your ID",            tags = {"People"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = @Content(schema = @Schema(implementation = PersonDTO.class))                    ),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            }    )    ResponseEntity<PersonDTO> findById(@PathVariable("id") Long id);    @Operation(summary = "Add new Person",            description = "Creates a person's information by passing in a JSON, XML or YAML representation of the update person",            tags = {"People"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = @Content(schema = @Schema(implementation = PersonDTO.class))                    ),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            }    )    ResponseEntity<PersonDTO> create(@RequestBody PersonDTO personDto);    @Operation(summary = "Updates a person's information",            description = "Updates a person's information by passing in a JSON, XML or YAML representation of the update person",            tags = {"People"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = @Content(schema = @Schema(implementation = PersonDTO.class))                    ),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            })    ResponseEntity<PersonDTO> update(@RequestBody PersonDTO personDto);    @Operation(summary = "Deletes a Person",            description = "Deletes specific person by their ID",            tags = {"People"},            responses = {                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            })    ResponseEntity<Void> delete(@PathVariable("id") Long id);    @Operation(summary = "Disable a Person",            description = "Disable a specific person by your ID",            tags = {"People"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = @Content(schema = @Schema(implementation = PersonDTO.class))                    ),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            }    )    ResponseEntity<PersonDTO> disablePerson(@PathVariable("id") Long id);}