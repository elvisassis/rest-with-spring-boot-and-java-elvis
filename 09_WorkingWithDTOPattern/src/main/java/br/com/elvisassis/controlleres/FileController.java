package br.com.elvisassis.controlleres;import br.com.elvisassis.controlleres.docs.FileControllerDocs;import br.com.elvisassis.data.dto.UploadFileResponseDTO;import br.com.elvisassis.services.FileStorageService;import jakarta.servlet.http.HttpServletRequest;import lombok.extern.slf4j.Slf4j;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.servlet.support.ServletUriComponentsBuilder;import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;@Slf4j@RestController@RequestMapping("/api/file/v1")public class FileController implements FileControllerDocs{    public FileController(FileStorageService service) {        this.service = service;    }    private FileStorageService service;    @PostMapping("/uploadFile")    @Override    public ResponseEntity<UploadFileResponseDTO> uploadFile(@RequestParam("file") MultipartFile file) {        var filename = service.storeFile(file);        var fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()                .path("/api/file/v1/downloadFile/")                .path(filename)                .toUriString();        var dto = new UploadFileResponseDTO(filename, fileDownloadUri, file.getContentType(), file.getSize());        return ResponseEntity.ok(dto);    }    @PostMapping("/uploadMultipleFiles")    @Override    public ResponseEntity<List<UploadFileResponseDTO>> uploadMultipleFiles(@RequestParam("files") MultipartFile[] files) {        var responses = Arrays.asList(files)                .stream()                .map(file -> uploadFile(file))                .collect(Collectors.toList());        List<UploadFileResponseDTO> dtos = responses.stream()                .map(ResponseEntity::getBody)                .collect(Collectors.toList());        return ResponseEntity.ok(dtos);    }    @Override    public ResponseEntity<ResponseEntity> downloadFile(String fileName, HttpServletRequest request) {        return null;    }}