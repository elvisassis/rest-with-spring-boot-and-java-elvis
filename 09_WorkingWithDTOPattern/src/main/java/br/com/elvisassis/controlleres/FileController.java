package br.com.elvisassis.controlleres;import br.com.elvisassis.controlleres.docs.FileControllerDocs;import br.com.elvisassis.data.dto.UploadFileResponseDTO;import br.com.elvisassis.services.FileStorageService;import jakarta.servlet.http.HttpServletRequest;import lombok.extern.slf4j.Slf4j;import org.springframework.core.io.Resource;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import org.springframework.web.servlet.support.ServletUriComponentsBuilder;import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;@Slf4j@RestController@RequestMapping("/api/file/v1")public class FileController implements FileControllerDocs{    public FileController(FileStorageService service) {        this.service = service;    }    private FileStorageService service;    @PostMapping("/uploadFile")    @Override    public ResponseEntity<UploadFileResponseDTO> uploadFile(@RequestParam("file") MultipartFile file) {        var filename = service.storeFile(file);        var fileDownloadUri = ServletUriComponentsBuilder.fromCurrentContextPath()                .path("/api/file/v1/downloadFile/")                .path(filename)                .toUriString();        var dto = new UploadFileResponseDTO(filename, fileDownloadUri, file.getContentType(), file.getSize());        return ResponseEntity.ok(dto);    }    @PostMapping("/uploadMultipleFiles")    @Override    public ResponseEntity<List<UploadFileResponseDTO>> uploadMultipleFiles(@RequestParam("files") MultipartFile[] files) {        var responses = Arrays.asList(files)                .stream()                .map(file -> uploadFile(file))                .collect(Collectors.toList());        List<UploadFileResponseDTO> dtos = responses.stream()                .map(ResponseEntity::getBody)                .collect(Collectors.toList());        return ResponseEntity.ok(dtos);    }    @GetMapping("/downloadFile/{fileName:.+}")    @Override    public ResponseEntity<Resource> downloadFile(@PathVariable String fileName, HttpServletRequest request) {        Resource resource = service.loadFileAsResource(fileName);        String contentType = null;        try {            contentType = request.getServletContext().getMimeType(resource.getFile().getAbsolutePath());        } catch (Exception e){            log.error("Could not determine file type!");        }        if(contentType == null) {            contentType = "application/octet-stream";        }        return ResponseEntity.ok()                .contentType(MediaType.parseMediaType(contentType))                .header(HttpHeaders.CONTENT_DISPOSITION,                        "attachment; filename=\"" + resource.getFilename() + "\"" )                .body(resource);    }}