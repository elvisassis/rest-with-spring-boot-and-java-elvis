package br.com.elvisassis.controlleres.docs;import br.com.elvisassis.data.dto.BookDTO;import br.com.elvisassis.data.dto.BookDTO;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.media.ArraySchema;import io.swagger.v3.oas.annotations.media.Content;import io.swagger.v3.oas.annotations.media.Schema;import io.swagger.v3.oas.annotations.responses.ApiResponse;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.List;public interface BookControllerDocs {    @Operation(summary = "Finds All Books",            description = "Finds All Books",            tags = {"Book"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = {                                    @Content(                                            mediaType = MediaType.APPLICATION_JSON_VALUE,                                            array = @ArraySchema(schema = @Schema(implementation = BookDTO.class))                                    )                            }),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            }    )    ResponseEntity<List<BookDTO>> findAll();    @Operation(summary = "Finds a Book",            description = "Find a specific Book by your ID",            tags = {"Book"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = @Content(schema = @Schema(implementation = BookDTO.class))                    ),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            }    )    ResponseEntity<BookDTO> findById(@PathVariable("id") Long id);    @Operation(summary = "Add new Book",            description = "Creates a book's information by passing in a JSON, XML or YAML representation of the update person",            tags = {"Book"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = @Content(schema = @Schema(implementation = BookDTO.class))                    ),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            }    )    ResponseEntity<BookDTO> create(@RequestBody BookDTO BookDTO);    @Operation(summary = "Updates a book's information",            description = "Updates a book's information by passing in a JSON, XML or YAML representation of the update person",            tags = {"People"},            responses = {                    @ApiResponse(                            description = "Success",                            responseCode = "200",                            content = @Content(schema = @Schema(implementation = BookDTO.class))                    ),                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            })    ResponseEntity<BookDTO> update(@RequestBody BookDTO BookDTO);    @Operation(summary = "Deletes a Book",            description = "Deletes specific book by their ID",            tags = {"People"},            responses = {                    @ApiResponse(description = "No Content", responseCode = "204", content = @Content),                    @ApiResponse(description = "Bad Request", responseCode = "400", content = @Content),                    @ApiResponse(description = "Unauthorized", responseCode = "401", content = @Content),                    @ApiResponse(description = "Not Found", responseCode = "404", content = @Content),                    @ApiResponse(description = "Internal Server Error", responseCode = "500", content = @Content)            })        ResponseEntity<Void> delete(@PathVariable Long id);}