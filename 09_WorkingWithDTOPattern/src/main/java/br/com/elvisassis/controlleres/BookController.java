package br.com.elvisassis.controlleres;import br.com.elvisassis.data.dto.BookDTO;import br.com.elvisassis.service.BookService;import io.swagger.v3.oas.annotations.tags.Tag;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import br.com.elvisassis.controlleres.docs.BookControllerDocs;import java.util.List;@RestController@RequestMapping("/api/book/v1")@Tag(name = "Book", description = "Endpoints for Managing Books")public class BookController implements BookControllerDocs {    public BookController(BookService service) {        this.service = service;    }    private BookService service;    @GetMapping(produces = {            MediaType.APPLICATION_JSON_VALUE,            MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_YAML_VALUE    })    @Override    public ResponseEntity<List<BookDTO>> findAll() {        var booksDTO = service.findAll();        return ResponseEntity.ok(booksDTO);    }    @GetMapping(value = "/{id}", produces = {            MediaType.APPLICATION_JSON_VALUE,            MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_YAML_VALUE    })    @Override    public ResponseEntity<BookDTO> findById(@PathVariable Long id) {        var dto = service.findById(id);        return ResponseEntity.ok(dto);    }    @PostMapping(produces = {            MediaType.APPLICATION_JSON_VALUE,            MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_YAML_VALUE    },            consumes = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE})    @Override    public ResponseEntity<BookDTO> create(@RequestBody BookDTO bookDTO) {        var dto = service.create(bookDTO);        return ResponseEntity.ok(dto);    }    @PutMapping(produces = {            MediaType.APPLICATION_JSON_VALUE,            MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_YAML_VALUE    },            consumes = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE            })    @Override    public ResponseEntity<BookDTO> update(@RequestBody BookDTO bookDTO) {        var dto = service.update(bookDTO);        return ResponseEntity.status(HttpStatus.CREATED).body(dto);    }    @DeleteMapping("/{id}")    @Override    public ResponseEntity<Void> delete(@PathVariable Long id) {        service.delete(id);        return ResponseEntity.noContent().build();    }}