package br.com.elvisassis.controlleres;import br.com.elvisassis.controlleres.docs.PersonControllerDocs;import br.com.elvisassis.data.dto.PersonDTO;import br.com.elvisassis.file.exporter.MediaTypes;import br.com.elvisassis.services.PersonServices;import io.swagger.v3.oas.annotations.tags.Tag;import jakarta.servlet.http.HttpServletRequest;import lombok.extern.slf4j.Slf4j;import org.springframework.core.io.Resource;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.domain.Sort.Direction;import org.springframework.hateoas.EntityModel;import org.springframework.hateoas.PagedModel;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.util.List;import java.util.Map;//@CrossOrigin(origins = "http://localhost:9000")@Slf4j@RestController@RequestMapping("/api/person/v1")@Tag(name = "People", description = "Endpoints for Managing People")public class PersonController implements PersonControllerDocs {    public PersonController(PersonServices personServices) {        this.services = personServices;    }    private PersonServices services;    @GetMapping(produces = {            MediaType.APPLICATION_JSON_VALUE,            MediaType.APPLICATION_XML_VALUE,            MediaType.APPLICATION_YAML_VALUE})    @Override    public ResponseEntity<PagedModel<EntityModel<PersonDTO>>> findAll(            @RequestParam(value = "page", defaultValue = "0") Integer page,            @RequestParam(value = "size", defaultValue = "12") Integer size,            @RequestParam(value = "direction", defaultValue = "asc") String direction    ) {        var sortDirection = "desc".equalsIgnoreCase(direction) ? Direction.DESC : Direction.ASC;        Pageable pageable = PageRequest.of(page, size, Sort.by(sortDirection, "firstName"));        var people = services.findAll(pageable);        return ResponseEntity.ok(people);    }    @GetMapping(value = "/exportPage",            produces = {                MediaTypes.APPLICATION_XLSX_VALUE,                MediaTypes.APPLICATION_CSV_VALUE,                MediaTypes.APPLICATION_PDF_VALUE})    @Override    public ResponseEntity<Resource> exportPage(            @RequestParam(value = "page", defaultValue = "0") Integer page,            @RequestParam(value = "size", defaultValue = "12") Integer size,            @RequestParam(value = "direction", defaultValue = "asc") String direction,            HttpServletRequest request) {        var sortDirection = "desc".equalsIgnoreCase(direction) ? Direction.DESC : Direction.ASC;        Pageable pageable = PageRequest.of(page, size, Sort.by(sortDirection, "firstName"));        String acceptHeader = request.getHeader(HttpHeaders.ACCEPT);        Resource file = services.exportPage(pageable, acceptHeader);        Map<String, String> extensionMap = Map.of(                MediaTypes.APPLICATION_XLSX_VALUE, ".xlsx",                MediaTypes.APPLICATION_CSV_VALUE, ".csv",                MediaTypes.APPLICATION_PDF_VALUE, ".pdf"        );        var fileExtension = extensionMap.getOrDefault(acceptHeader, "");        var contentType = acceptHeader != null ? acceptHeader : "application/octet-stream";        var filename = "people_exported" + fileExtension;        return ResponseEntity.ok()                .contentType(MediaType.parseMediaType(contentType))                .header(HttpHeaders.CONTENT_DISPOSITION,                        "attachment; filename=\"" + filename + "\"")                .body(file);    }    @GetMapping(value = "/findByName/{firstName}",            produces = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE})    @Override    public ResponseEntity<PagedModel<EntityModel<PersonDTO>>> findByName(            @PathVariable("firstName") String firstName,            @RequestParam(value = "page", defaultValue = "0") Integer page,            @RequestParam(value = "size", defaultValue = "12") Integer size,            @RequestParam(value = "direction", defaultValue = "asc") String direction    ) {        var sortDirection = "desc".equalsIgnoreCase(direction) ? Direction.DESC : Direction.ASC;        Pageable pageable = PageRequest.of(page, size, Sort.by(sortDirection, "firstName"));        var people = services.findByName(firstName, pageable);        return ResponseEntity.ok(people);    }    @GetMapping(value = "/{id}",            produces = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE})    @Override    public ResponseEntity<PersonDTO> findById(@PathVariable("id") Long id) {        var person = services.findById(id);        return ResponseEntity.ok(person);    }    @PostMapping(            produces = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE},            consumes = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE})    @Override    public ResponseEntity<PersonDTO> create(@RequestBody PersonDTO personDto) {        var newPerson = services.create(personDto);        return ResponseEntity.status(HttpStatus.CREATED).body(newPerson);    }    @PostMapping(value = "/massCreation",            produces = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE})    @Override    public ResponseEntity<List<PersonDTO>> massCreation(@RequestParam("file") MultipartFile file) {        var dto = services.massCreation(file);        return ResponseEntity.ok(dto);    }    @PutMapping(            produces = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE},            consumes = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE})    @Override    public ResponseEntity<PersonDTO> update(@RequestBody PersonDTO personDto) {        var updatePerson = services.update(personDto);        return ResponseEntity.ok(updatePerson);    }    @DeleteMapping(value = "/{id}")    @Override    public ResponseEntity<Void> delete(@PathVariable("id") Long id) {        services.delete(id);        return ResponseEntity.noContent().build();    }    @PatchMapping(value = "/{id}",            produces = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE})    @Override    public ResponseEntity<PersonDTO> disablePerson(@PathVariable("id") Long id) {        var dto = services.disablePerson(id);        return ResponseEntity.ok(dto);    }}