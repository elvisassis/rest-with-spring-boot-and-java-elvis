package br.com.elvisassis.config;import br.com.elvisassis.security.jwt.JwtTokenFilter;import br.com.elvisassis.security.jwt.JwtTokenProvider;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.password.DelegatingPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import java.util.HashMap;import java.util.Map;@EnableWebSecurity@Configurationpublic class SecurityConfig {    public SecurityConfig(JwtTokenProvider tokenProvider) {        this.tokenProvider = tokenProvider;    }    private JwtTokenProvider tokenProvider;    @Bean    PasswordEncoder passwordEncoder() {        PasswordEncoder pbkdf2Encoder = new Pbkdf2PasswordEncoder("",                8, 18500,                Pbkdf2PasswordEncoder.SecretKeyFactoryAlgorithm.PBKDF2WithHmacSHA256);        Map<String, PasswordEncoder> encoders = new HashMap<>();        encoders.put("pbkdf2", pbkdf2Encoder);        DelegatingPasswordEncoder passwordEncoder = new DelegatingPasswordEncoder("pbkdf2", encoders);        passwordEncoder.setDefaultPasswordEncoderForMatches(pbkdf2Encoder);        return passwordEncoder;    }    @Bean    AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {        return configuration.getAuthenticationManager();    }    @Bean    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {        JwtTokenFilter filter = new JwtTokenFilter(tokenProvider);        return http                .httpBasic(AbstractHttpConfigurer::disable)                .csrf(AbstractHttpConfigurer::disable)                .addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class)                .sessionManagement(                        session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)                )                .authorizeHttpRequests(                        authorizeHttpRequests -> authorizeHttpRequests                                .requestMatchers(                                        "/auth/signin",                                        "/auth/refresh/**",                                        "/auth/createdUser", //TODO remover quando terminar os estudos, não pode ir para produção                                        "/swagger-ui/**",                                        "/v3/api-docs/**"                                ).permitAll()                                .requestMatchers("/api/**").authenticated()                                .requestMatchers("/users").denyAll()                )                .cors(cors -> {})                .build();    }}