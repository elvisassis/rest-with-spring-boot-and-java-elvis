package br.com.elvisassis.unittests.service;import br.com.elvisassis.controlleres.BookController;import br.com.elvisassis.data.dto.BookDTO;import br.com.elvisassis.exception.RequiredObjectIsNullException;import br.com.elvisassis.exception.ResourceNotFoundException;import br.com.elvisassis.repository.BookRepository;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import java.util.List;import java.util.stream.Collectors;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.linkTo;import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.methodOn;@Slf4j@Servicepublic class BookService {    public BookService(BookRepository repository) {        this.repository = repository;    }    private static final String RESOURCE_NOT_FOUND = "No record found for this ID!";    private BookRepository repository;    public List<BookDTO> findAll() {        log.info("Finding all Books!");        var booksDTO = repository.findAll().stream()                .map(book -> book.toDto())                .collect(Collectors.toList());        booksDTO.forEach(this::addHateoasLinks);        return booksDTO;    }    public BookDTO findById(Long id) {        log.info("Finding one Book!");        var bookDTO = repository.findById(id)                .orElseThrow(() -> new ResourceNotFoundException(RESOURCE_NOT_FOUND))                .toDto();        addHateoasLinks(bookDTO);        return bookDTO;    }    public BookDTO create(BookDTO bookDTO) {        if (bookDTO == null) throw new RequiredObjectIsNullException();        log.info("Create a Book!");        var book = bookDTO.toEntity();        var dto = repository.save(book).toDto();        addHateoasLinks(bookDTO);        return dto;    }    public BookDTO update(BookDTO bookDTO) {        if(bookDTO == null) throw new RequiredObjectIsNullException();        log.info("Update one book");        var entity = repository.findById(bookDTO.getId()).orElseThrow(() -> new ResourceNotFoundException(RESOURCE_NOT_FOUND));        entity = bookDTO.toEntity();        var dto = repository.save(entity).toDto();        addHateoasLinks(dto);        return dto;    }    public void delete(Long id) {        log.info("Deleting one Book");        var entity = repository.findById(id).orElseThrow(() -> new ResourceNotFoundException(RESOURCE_NOT_FOUND));        repository.delete(entity);    }    private void addHateoasLinks(BookDTO bookDTO) {        bookDTO.add(linkTo(methodOn(BookController.class).findById(bookDTO.getId())).withSelfRel().withType("GET"));        bookDTO.add(linkTo(methodOn(BookController.class).findAll()).withRel("findAll").withType("GET"));        bookDTO.add(linkTo(methodOn(BookController.class).create(bookDTO)).withRel("create").withType("POST"));        bookDTO.add(linkTo(methodOn(BookController.class).update(bookDTO)).withRel("update").withType("PUT"));        bookDTO.add(linkTo(methodOn(BookController.class).delete(bookDTO.getId())).withRel("delete").withType("DELETE"));    }}