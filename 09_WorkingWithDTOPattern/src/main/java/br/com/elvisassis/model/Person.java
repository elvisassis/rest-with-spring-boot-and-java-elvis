package br.com.elvisassis.model;import br.com.elvisassis.data.dto.PersonDTO;import br.com.elvisassis.mapper.PersonMapper;import jakarta.persistence.*;import lombok.AllArgsConstructor;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import java.io.Serializable;import java.util.List;import java.util.Objects;@AllArgsConstructor@NoArgsConstructor@Getter@Setter@Entity@Table(name = "person")public class Person implements Serializable {    private static final long sertialVersionUID =1;    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    @Column(name = "first_name", nullable = false, length = 80)    private String firstName;    @Column(name = "last_name", nullable = false, length = 80)    private String lastName;    @Column(name = "address", nullable = false, length = 100)    private String address;    @Column(name = "gender", nullable = false, length = 6)    private String gender;    @Column(name = "enabled", nullable = false)    private Boolean enabled;    @Column(name = "wikipedia_profile_url", length = 255)    private String profileUrl;    @Column(name = "photo_url", length = 255)    private String photoUrl;    @ManyToMany(fetch = FetchType.EAGER)    @JoinTable(            name = "person_books",            joinColumns = @JoinColumn(name = "person_id"),            inverseJoinColumns = @JoinColumn(name = "book_id")    )    private List<Book> books;    @Override    public boolean equals(Object o) {        if (!(o instanceof Person person)) return false;        return Objects.equals(getId(), person.getId()) && Objects.equals(getFirstName(), person.getFirstName()) && Objects.equals(getLastName(), person.getLastName()) && Objects.equals(getAddress(), person.getAddress()) && Objects.equals(getGender(), person.getGender()) && Objects.equals(getEnabled(), person.getEnabled()) && Objects.equals(getProfileUrl(), person.getProfileUrl()) && Objects.equals(getPhotoUrl(), person.getPhotoUrl()) && Objects.equals(getBooks(), person.getBooks());    }    @Override    public int hashCode() {        return Objects.hash(getId(), getFirstName(), getLastName(), getAddress(), getGender(), getEnabled(), getProfileUrl(), getPhotoUrl(), getBooks());    }    public PersonDTO toDto() {        return PersonMapper.INSTANCE.personToPersonDto(this);    }}