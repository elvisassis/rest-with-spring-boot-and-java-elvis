package br.com.elvisassis.model;import jakarta.persistence.*;import lombok.AllArgsConstructor;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import java.io.Serializable;import java.util.ArrayList;import java.util.Collection;import java.util.List;@Getter@Setter@NoArgsConstructor@Entity@Table(name = "users")public class User implements UserDetails, Serializable {    private static final long serialVersionUID = 1L;    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    @Column(name = "user_name", unique = true)    private String username;    @Column(name = "full_name")    private String fullName;    @Column(name = "password")    private String password;    @Column(name = "account_non_expired")    private Boolean accountNonExpired;    @Column(name = "account_non_locked")    private Boolean accountNonLocked;    @Column(name = "credentials_non_expired")    private Boolean credentialsNonExpired;    @Column(name = "enabled")    private Boolean enabled;    @ManyToMany(fetch = FetchType.EAGER)    @JoinTable(name = "user_permission",            joinColumns = {@JoinColumn(name = "id_user")},            inverseJoinColumns =  {@JoinColumn (name = "id_permission")}    )    private List<Permission> permissions;    public List<String> getRoles() {        List<String> roles = new ArrayList<>();        for (Permission permission: permissions) {            roles.add(permission.getDescription());        }        return roles;    }    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return this.permissions;    }    @Override    public String getPassword() {        return this.password;    };    public String getUsername() {        return this.username;    }    @Override    public boolean isAccountNonExpired() {        return this.accountNonExpired;    }    @Override    public boolean isAccountNonLocked() {        return this.isAccountNonLocked();    }    @Override    public boolean isCredentialsNonExpired() {        return this.isCredentialsNonExpired();    }    @Override    public boolean isEnabled() {        return this.enabled;    }}