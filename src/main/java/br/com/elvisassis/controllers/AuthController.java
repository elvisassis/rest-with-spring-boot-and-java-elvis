package br.com.elvisassis.controllers;import br.com.elvisassis.controllers.docs.AuthControllerDocs;import br.com.elvisassis.data.dto.security.AccountCredentialsDTO;import br.com.elvisassis.services.AuthService;import io.swagger.v3.oas.annotations.tags.Tag;import org.apache.commons.lang3.StringUtils;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;@Tag(name = "Authentication Endpoint")@RestController@RequestMapping("/auth")public class AuthController implements AuthControllerDocs {    public AuthController(AuthService service) {        this.service = service;    }    private AuthService service;    @PostMapping("/signin")    @Override    public ResponseEntity<?> sigin(@RequestBody AccountCredentialsDTO credentials) {        if (credentialsIsInvalid(credentials))            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Invalid client request");        var token = service.sigIn(credentials);        if (token == null) return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Invalid client request");        return token;    }    @PutMapping("/refresh/{username}")    @Override    public ResponseEntity<?> refreshToken(            @PathVariable("username") String username,            @RequestHeader("Authorization") String refreshToken) {        if (parametersAreInvalid(username, refreshToken))            return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Invalid client request!");        var token = service.refreshToken(username, refreshToken);        if (token == null) ResponseEntity.status(HttpStatus.FORBIDDEN).body("Invalid client request!");        return token;    }    @PostMapping(value = "/createUser",            produces = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE},            consumes = {                    MediaType.APPLICATION_JSON_VALUE,                    MediaType.APPLICATION_XML_VALUE,                    MediaType.APPLICATION_YAML_VALUE})    @Override    public ResponseEntity<AccountCredentialsDTO> create(@RequestBody AccountCredentialsDTO accountCredentialsDTO) {        var user = service.create(accountCredentialsDTO);        return ResponseEntity.status(HttpStatus.CREATED).body(user);    }    private boolean parametersAreInvalid(String username, String refreshToken) {        return StringUtils.isBlank(username) || StringUtils.isBlank(refreshToken);    }    private static boolean credentialsIsInvalid(AccountCredentialsDTO credentials) {        return credentials == null ||                StringUtils.isBlank(credentials.getPassword()) ||                StringUtils.isBlank(credentials.getPassword());    }}